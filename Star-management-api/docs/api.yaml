openapi: 3.0.3
info:
  title: Star Manangement
  description: Star Manangement
  version: 1.1.2
servers:
  - url: 'https://manageApi/STD21024'
    description: Mock server
  - url: 'http://localhost:8080'
    description: local environment
tags:
  - name: Drinking
  - name: Category
paths:
  /drinkings:
    get:
      tags:
        - Drinking
      description: Get all drinking
      summary: Get all drinking
      parameters:
        - name: page
          in: query
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
        - in: query
          name: name
          description: filter drinking by name
          schema:
            type: string
        - in: query
          name: category
          description: filter drinking by category name
          schema:
            type: string
      responses:
        200:
          description: List of drinking
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drinking"
    put:
      tags:
        - Drinking
      summary: Add new drinking or modify
      description: Add new drinking
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Drinking"

      responses:
        200:
          description: List of created drinking
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drinking"
  /drinking/{id}:
    get:
      tags:
        - Drinking
      description: Get drinking by id
      summary: Get drinking by id
      parameters:
        - name: id
          in: path
          description: id of the cocktail
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The identified cocktail.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drinking"
    delete:
      tags:
        - Drinking
      summary: "Delete drinking/{id}"
      operationId: "deleteDrinkingById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "number"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
  /categories:
    get:
      tags:
        - Category
      description: "Get the list of available Categories"
      summary: "Get the list of available Categories"
      responses:
        "200":
          description: "List of categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
    put:
      tags:
        - Category
      description: Create new category
      summary: Create new category
      responses:
        200:
          description: "List of categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        400:
          $ref: '#/components/responses/400'
  /categories/{id}:
    delete:
      tags:
        - Category
      summary: "Delete categories/{id}"
      operationId: "deleteCategoryById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "number"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
components:
  schemas:
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Drinking:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: fanta
        price:
          type: integer
          format: double
          example: 3500
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Cocktail:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: beer
        price:
          type: integer
          format: double
          example: 3500
        composition:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Drinking'
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotFound
        message: Entity not NotFound
  responses:
    '400':
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '404':
      description: "Bad request not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"